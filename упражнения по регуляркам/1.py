import re

text = """
Регулярные выражения представляют собой похожий, но гораздо более сильный инструмент 
для поиска строк, проверки их на соответствие какому-либо шаблону и другой подобной 
работы. Англоязычное название этого инструмента — Regular Expressions или просто RegExp. 
Строго говоря, регулярные выражения — специальный язык для описания шаблонов строк.

АААА аааа АаАаАаАа 123 123 12345 11223344
А1Б2В3 АА11 ББ22ВВ 33ГГ44

Тест!    Ещё!   Даёшь!   ЁЁЁёёё

QwertyЙцукен

+-,/[](), *** (***), a*(b+[c+d])*e/f+g-h

!!####$$$$$%%%%%&&&'''(((())***++++,,,,,-----..//:::;;;;<<<<<===>>>????
@@@@@[[[[\\\]]]]]^^^__`````{{{{|||||}}}}}~~~~~

<a href="#10">10: CamelCase -> under_score</a>;
<a href="#11">11: Удаление повторов</a>;
<a href="#12">12: Близкие слова</a>;
<a href="#13">13: Форматирование больших чисел</a>;
<a href="#14">14: Разделить текст на предложения</a>;
<a href="#15">15: Форматирование номера телефона</a>;
<a href="#16">16: Поиск e-mail'ов — 2</a>;
"""

# 1. Найти все натуральные числа (возможно, окружённые буквами)
pattern1 = r'(?<=[a-zA-Z]|^)\d+(?=[a-zA-Z]|$)'
matches1 = re.findall(pattern1, text)
print("1. Натуральные числа:", matches1)

# 2. Найти все «слова», написанные капсом (то есть строго заглавными), возможно внутри настоящих слов (аааБББввв)
pattern2 = r'\b[A-ZА-Я]+(?=\w|$)'
matches2 = re.findall(pattern2, text)
print("2. Слова, написанные капсом:", matches2)

# 3. Найти слова, в которых есть русская буква, а за ней цифра
pattern3 = r'\b\w*[А-Яа-я]\d\w*\b'
matches3 = re.findall(pattern3, text)
print("3. Слова с русской буквой и цифрой:", matches3)

# 4. Найти все слова, начинающиеся с русской или латинской большой буквы (\b — граница слова)
pattern4 = r'\b[A-ZА-Я]\w*\b'
matches4 = re.findall(pattern4, text)
print("4. Слова, начинающиеся с большой буквы:", matches4)

# 5. Найти все слова, которые начинаются на гласную (\b — граница слова)
pattern5 = r'\b[AEIOUYaeiouyАЕЁИОУЫЭЮяеёиоуыэю]\w*\b'
matches5 = re.findall(pattern5, text)
print("5. Слова, начинающиеся на гласную:", matches5)

# 6. Найти все натуральные числа, не находящиеся на границе слова
pattern6 = r'(?<!\b)\d+(?!\b)'
matches6 = re.findall(pattern6, text)
print("6. Натуральные числа, не на границе слова:", matches6)

# 7. Найти строчки, в которых есть символ * (. — это точно не конец строки!)
pattern7 = r'^.*\*.*$'
matches7 = re.findall(pattern7, text, flags=re.MULTILINE)
print("7. Строчки с символом *:", matches7)

# 8. Найти строчки, в которых есть открывающая и когда-нибудь потом закрывающая скобки
pattern8 = r'^.*\(.*\).*$'
matches8 = re.findall(pattern8, text, flags=re.MULTILINE)
print("8. Строчки с открывающей и закрывающей скобками:", matches8)

# 9. Выделите одним махом весь кусок оглавления (в конце примера, вместе с тегами)
pattern9 = r'<h2>.*<\/ul>'
matches9 = re.findall(pattern9, text, flags=re.DOTALL)
print("9. Оглавление (с тегами):", matches9)

# 10. Выделите одним махом только текстовую часть оглавления, без тегов
pattern10 = r'<h2>\K.*(?=<\/ul>)'
matches10 = re.findall(pattern10, text, flags=re.DOTALL)
print("10. Оглавление (без тегов):", matches10)

# 11. Найти пустые строчки
pattern11 = r'^\s*$'
matches11 = re.findall(pattern11, text, flags=re.MULTILINE)
print("11. Пустые строчки:", matches11)

# 12. Найти все теги, не включая их содержимое
pattern12 = r'<[^>]+>'
matches12 = re.findall(pattern12, text)
print("12. Теги:", matches12)
